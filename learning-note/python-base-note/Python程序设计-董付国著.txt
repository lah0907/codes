

第1章	基础知识

IDLE环境下快捷键：

Alt+P:		上一条命令
Alt+N:		下一条命令
Alt+/：		自动补全前面曾经出现过的单词，在多个单词中循环选择

Alt+3:		注释代码块
Alt+4:		取消代码块注释

Ctrl+]:		缩进代码块
Ctrl+[:		取消代码块缩进

Ctrl+F6：	重启Shell，之前定义的对象全部无效
F1:			打开Python帮助文档


使用pip管理Python扩展库（模块）

Python对象模型：
内置对象可直接使用
	包括数据、字符串、列表、元组、字典、集合、文件、布尔型（True、False）、空类型（None）、编程单
		元类型（函数和类）
	和del命令
	以及cmp()、len()、id()、type()等大量内置函数。	
有些对象则需要导入模块后才能使用，如math模块中的sqrt等函数。	
	
Python是一种动态类型语言，变量的类型是可以变化的，如
>>> x = 1
>>> print(type(x))
<class 'int'>
>>> x = 'string'
>>> print(type(x))
<class 'str'>


id(x)函数返回变量所指值的内存地址。
dir(__builtins__)返回所有的内置模块、类和函数。

--------------------------------------------

数字
整数的类型主要有4种：
1.十进制整数，如22
2.十六进制整数，以0x开头，如0x10
3.八进制整数，以0o开头，如0o11
4.二进制整数，以0b开头，如0b11

复数用j或J表示虚部，如 
>>> a = 3 + 4j
>>> a.real
3.0
>>> a.imag
4.0

--------------------------------------------

字符串

对字符串进行格式化，把其他的类型的对象按格式要求转换为字符串，如
>>> a = 1.234
>>> s = '%7.3f' %a
>>> s
'  1.234'
>>> s = '%-7.3f' %a
>>> s
'1.234  '
>>> s = "%d:%c" %(65,65)
>>> s
'65:A'
>>> s = """this language is %s,version %d""" %('Python',3.5)
>>> s
'this language is Python,version 3'


dir和help两个帮助命令

del命令：可以删除对象并解除与值之间的关系；也可以删除列表或者其他可变序列中的指定元素。


>>> for i in range(10,20,2):
	print(i,end=' ')
10 12 14 16 18 

-----------------------------------------------------------------
模块：
导入模块的两种方法：
1.import 模块名 [as 别名]
  import math
2.from 模块名 import 对象名 [as 别名]
  from math import sin
  form math import *
  
-----------------------------------------------
注释：
注释的两种方式：
1.以#开始，注释当前行
2.包含在三单引号或者三双引号之间且不属于任何语句的内容

续行符 \
>>> a = 'aaaaaaaaaaaaa ' + \
    'bbbb'  

每个python脚本在运行时都有一个__name__属性。如果脚本作为模块被导入，则其__name__属性的值被自动设置
模块名；如果脚本独立运行，则其__name__属性值被设置为__main__。

利用该属性可控制python程序的某些行为。例如，编写一个包含大量可被其他程序利用的函数的模块，而不希望
该模块可以直接运行，则添加一下代码：
if __name__ == '__main__':
	print('please use me as a module')
	
练习：任意输入3个英文单词，按字典顺序输出。
s = input('x,y,z=')
x,y,z = s.split(',')
if x > y:
    x,y = y,x
if x > z:
    x,z = z,x
if y > z:
    y,z = z,y
print(x,y,z)

>>>x,y,z=bbb,ccc,aaa
>>>aaa bbb ccc	

====================================================================================

第2章	python数据结构

Python中常用的序列结构有列表、元组、字典、字符串、集合以及range对象等。
除了字典和集合属于无序序列之外，列表、元组、字符串等序列都支持双向索引，
第一个元素下标为0，第二个元素下标为1，以此类推；
最后一个元素下标为-1，倒数第二个元素下标是-2，以此类推。

---------------------------------
列表

列表中的元素占用有序连续内存空间，向Java中的ArrayList。
同一个列表中元素的数据类型可以各不相同。
列表对象常用方法：
list.append(x)
list.extend(L)
list.insert(index,x)
list.remove(x)
list.pop([index])
list.clear()
list.index(x)
list.count(x)
list.reverse()
list.sort()
list.copy()

比较两种遍历：
>>> aList = [1] * 12
>>> aList
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
>>> for temp in aList:
	if temp == 1:
		aList.remove(temp)
>>> aList
[1, 1, 1, 1, 1, 1]

>>> bList = [1] * 12
>>> bList
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
>>> for temp in bList[::-1]:	#-1表示从右开始遍历,步长为1
	if temp == 1:
		bList.remove(temp)	
>>> bList
[]


>>> cList = list(range(10,20,2))
>>> cList
[10, 12, 14, 16, 18]
>>> cList[::-1]
[18, 16, 14, 12, 10]

>>> dList = cList
>>> dList is cList
True


序列操作的常用内置函数
cmp(list1,list2)
len(list)
max(list)
min(list)
#说明：max和min返回列表中的最大或最小元素，同样适用于元组、字符串、集合、range对象和字典等。
但对字典操作时，默认是对字典的"键"进行计算，如果需要对字典的"值"进行计算，用字典对象的values()方法
sum(list)
zip(list1,list2)
		>>> aList = [1,2,3]
		>>> bList = [4,5,6]
		>>> cList = [7,8,9]
		>>> dList = zip(aList,bList,cList)
		>>> dList
		<zip object at 0x023F6D28>
		>>> dList = list(dList)
		>>> dList
		[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
		
enumerate(列表)：
			枚举列表、元组或其他可迭代对象的元素，返回枚举对象，枚举对象中每个元素是包含下标和元素值的元组。
			该函数对字符串和字典同样有效，但对字典操作时区分"键"和"值"。

>>> dList
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
>>> for item in enumerate(dList):
	print(item)
(0, (1, 4, 7))
(1, (2, 5, 8))
(2, (3, 6, 9))

>>> for index,ch in enumerate('ABC'):
	print((index,ch),end=',')
(0, 'A'),(1, 'B'),(2, 'C'),

>>> a = {'A':65,'B':66,'C':67}
>>> a
{'B': 66, 'C': 67, 'A': 65}
>>> for i,v in enumerate(a):
	print(i,v)

	
0 B
1 C
2 A
>>> for i,v in enumerate(a.values()):
	print(i,v)

	
0 66
1 67
2 65
>>> 

列表推倒式：
>>> aList = [x**2 for x in range(1,10,2)]
>>> aList
[1, 9, 25, 49, 81]

>>> aList =[]
>>> for x in range(1,10,2):
	aList.append(x**2)
>>> aList
[1, 9, 25, 49, 81]


>>> abc = ["aaa","bbb","ccc"]
>>> aList = [w.strip() for w in abc]
>>> aList
['aaa', 'bbb', 'ccc']

------------------------------------------------------------
元组
元组属于不可变序列。
如果要创建只含有一个元素的元组，只把元素放在小括号里是不行的，还需要在元素后面加上一个逗号","，
而创建含有多个元素的元组则在末尾不用加逗号。方便起见，创建元组时，在每个元素后面都加上逗号。

创建元组：
>>> a = 1,
>>> b = (1,)
>>> c = (1,2)
>>> d = (1,2,)
>>> print(type(a),type(b),type(c),type(d))
<class 'tuple'> <class 'tuple'> <class 'tuple'> <class 'tuple'>

list()函数将序列转换成列表
tuple()函数将其他类型序列转换成元组
>>> string = "abcdef"
>>> aTuple = tuple(string)
>>> aTuple
('a', 'b', 'c', 'd', 'e', 'f')
>>> type(aTuple)
<class 'tuple'>
>>> aList = [1,2,3,4]
>>> aTuple = tuple(aList)
>>> aTuple
(1, 2, 3, 4)

元组和列表的区别
1.元组是不可变序列，元组中的数据一旦定义就无法更改；
  列表是可变序列，可以通过append()/extend()/insert()/remove()/pop()等方法修改列表。
  del只能删除整个元组，而可以删除列表中的某个元素或者整个列表
2.元组的访问和处理速度比列表快。
3.作为不可变序列，整数、字符串、元组可用作字典的键，而可变的序列列表不可以。 
tuple()函数可以看作是冻结列表使其不可变
list()是在融化元组使其可变。

序列解包
>>> x,y,z = 1,2,3  #序列解包
>>> print(x,y,z)
1 2 3
>>> x,y,z
(1, 2, 3)

>>> v_tuple = (True,1.2,'string')
>>> x,y,z = v_tuple   #元组的序列解包
>>> print(x,y,z)
True 1.2 string
>>> (a,b,c) = v_tuple  #元组的序列解包
>>> print(a,b,c)
True 1.2 string 

序列解包也可以用在列表和字典，但对字典使用时默认是对“键”进行操作，
通过items()/values()方法对字典的“键-值对”或者“值”进行操作。
>>> aList = [1,2,3]
>>> x,y,z = aList   # 列表的序列解包
>>> x,y,z
(1, 2, 3)


>>> m = {'a':1, 'b':2, 'c':3}
>>> d,e,f = m  #对字典的键序列解包
>>> e
'a'

>>> a,b,c = m.items() #对字典的键值对序列解包
>>> b
('a', 1)

>>> for k,v in m.items():
	print(k,v)
b 2
a 1
c 3

>>> x,y,z = m.values() #对字典的值序列解包
>>> x,y,z
(2, 1, 3)


生成器推导式
与列表推导式接近，列表推导式使用方括号[]，而生成器推导式使用圆括号()
列表推导式返回的是列表；
>>> aList = [item**2 for item in range(1,10,3)]
>>> aList
[1, 16, 49]
>>> type(aList)
<class 'list'>
生成器推导式返回的是一个生成器对象，不是列表也不是元组。
访问生成器对象中的元素的方法：
1.将其转换为列表或元组；
2.用__next__()方法遍历；
3.直接将其当做迭代器使用。

>>> g = (item*2 for item in range(5))
>>> type(g)
<class 'generator'>
>>> tuple(g)
(0, 2, 4, 6, 8)
>>> tuple(g)
()


>>> g = (item*3 for item in range(5))
>>> list(g)
[0, 3, 6, 9, 12]
>>> list(g)
[]


>>> g = (item*4 for item in range(5))
>>> g.__next__()
0
>>> g.__next__()
4
>>> g.__next__()
8
>>> g.__next__()
12
>>> g.__next__()
16
>>> g.__next__()
Traceback (most recent call last):
  File "<pyshell#67>", line 1, in <module>
    g.__next__()
StopIteration


>>> g = (item*5 for item in range(5))
>>> for i in g:
	print(i,end=' ')
0 5 10 15 20 


-----------------------------------------
字典
字典是键值对的无序可变序列。
字典中的键可以是任何不可变数据，如整数、实数、复数、字符串和元组等，不可用列表、集合和字典等可变类型。

字典的创建
>>> m = {'a':1, 'b':2, 'c':3}
>>> print(type(m),m)
<class 'dict'> {'b': 2, 'a': 1, 'c': 3}

>>> keys = ['a','b','c']
>>> values = [3,2,1]
>>> dictionary = dict(zip(keys,values))
>>> print(type(dictionary),dictionary)
<class 'dict'> {'b': 2, 'a': 3, 'c': 1}

 
>>> ##使用内置函数dict()创建字典
>>> d = dict(ID = '1001',name = '小王')
>>> print(type(d),d)
<class 'dict'> {'ID': '1001', 'name': '小王'}

>>> d = dict(ID = ('1001','1002'),name = ('小王','小李'))
>>> print(type(d),d)
<class 'dict'> {'ID': ('1001', '1002'), 'name': ('小王', '小李')}


>>> ##创建值为空的字典
>>> aDict = dict.fromkeys(['name','age','gender'])
>>> aDict
{'age': None, 'name': None, 'gender': None}


删除字典中元素或字典
del


字典元素的读取
通过字典的键访问字典，若键不存在则抛出异常
	>>> aDict = {'name':'小王', 'gender':'male', 'age':20}
	>>> aDict['name']
	'小王'

通过更加安全的方法get()方法访问字典对象元素，键不存在时默认返回None，也可以返回指定的值
>>> aDict.get('name')
'小王'
>>> aDict.get('ID')
>>> temp = aDict.get("ID")
>>> temp is None
True
>>> temp == None
True


>>> aDict['subjects'] = aDict.get('score',[])
>>> aDict['subjects'].append('数值分析')
>>> aDict['subjects'].append('英语写作')
>>> aDict
{'subjects': ['数值分析', '英语写作'], 'age': 20, 'name': '小王', 'gender': 'male'}

items()返回键值对列表
keys()返回键列表
values()返回值列表

>>> aDict
{'subjects': ['数值分析', '英语写作'], 'age': 20, 'name': '小王', 'gender': 'male'}
>>> aDict.items()
dict_items([('subjects', ['数值分析', '英语写作']), ('age', 20), ('name', '小王'), ('gender', 'male')])
>>> aDict.keys()
dict_keys(['subjects', 'age', 'name', 'gender'])
>>> aDict.values()
dict_values([['数值分析', '英语写作'], 20, '小王', 'male'])


对字典元素的操作
添加键值对或者修改键对应的值
>>> aDict['gender'] = 'female'
>>> aDict['home'] = 'China'
>>> aDict
{'subjects': ['数值分析', '英语写作'], 'age': 20, 'home': 'China', 'name': '小王', 'gender': 'female'}

update()方法一次性添加多个键值对
>>> bDict = {'c':3}
>>> bDict.update({'a':1,'b':2})
>>> bDict
{'b': 2, 'a': 1, 'c': 3}


字典的删除
>>> cDict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}
#del命令删除字典指定键对应的元素
>>> del(cDict['a'])
>>> cDict
{'d': 4, 'f': 6, 'b': 2, 'e': 5, 'c': 3}
>>> 

#字典函数pop()删除并返回指定键的元素
>>> cDict.pop('d')
4
>>> 
#没有参数，删除并返回字典中的一个元素
>>> cDict.popitem()
('f', 6)
>>> 

#清空字典中所有元素
>>> cDict.clear()
>>> cDict
{}
>>> 

------------------------------------------
集合

集合是无序可变集合，界定符是大括号，同一个集合的元素之间不允许重复，集合中每个元素都是唯一的。

集合的创建和删除

set()函数将列表、元组等其他可迭代对象转换成集合，会去除重复元素仅保留一个。

>>> aSet = {3,5}
>>> aSet.add(7)
>>> print(type(aSet),aSet)
<class 'set'> {3, 5, 7}

>>> bSet = set(range(1,10,3))
>>> print(type(bSet),bSet)
<class 'set'> {1, 4, 7}

del命令，删除整个集合
pop()方法，删除并返回一个元素，没有参数
remove()方法，删除指定元素，参数为所要删除的元素
clear()方法，清空集合

>>> cSet = set(range(10))
>>> cSet
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

>>> cSet.pop()
0

>>> cSet.remove(5)
>>> cSet
{2, 3, 4, 6, 7, 8, 9}

>>> cSet.clear()
>>> cSet
set()

>>> del cSet

集合操作
交集、并集、差集
>>> dSet = {1, 2, 3, 4, 5, 6}
>>> eSet = {4, 5, 6, 7, 8, 9}

>>> dSet.union(eSet)  #求并集
{1, 2, 3, 4, 5, 6, 7, 8, 9}

>>> dSet&eSet   #求交集
{4, 5, 6}
>>> dSet.intersection(eSet)  #求交集
{4, 5, 6}

>>> dSet.difference(eSet)  #求差集
{1, 2, 3}


======================================================

第3章  选择与循环

选择结构

逻辑运算符and和or具有短路求值（惰性求值）的特点，这会大幅度提高程序的运行效率。

关系运算符可以连续使用
>>> print(1 < 2 < 3)
True

>>> aList = list("12345") 
>>> aList
['1', '2', '3', '4', '5'] #列表中的元素是字符串才可以
>>> '-'.join(aList)
'1-2-3-4-5'


双分支选择结构（三目运算符）
>>> x,y = 1,2
>>> z = x if x > y else y
>>> z
2

循环

endFlag = 'yes'
sum = 0
while endFlag.lower() == 'yes':
    x = input('输入一个（1,100）之间的整数')
    if x.isdigit():
        x = int(x)
        if  0 < x < 100:
            sum = sum + x
        else:
            print('输入的整数不在范围内')
    else:
         print('请输入整数')
    endFlag = input('继续输入？（yes or no）')
result = '输入数字之和是：%d' %(sum)
print(result)



sum = 0
while True:
    x = input('输入一个（1,100）之间的整数,终止计算请输入"yes"')
    if(x.lower() == "yes"):
       break
    if x.isdigit():
        x = int(x)
        if  0 < x < 100:
            sum = sum + x
        else:
            print('输入的整数不在范围内')
    else:
        print('请输入整数')
result = '输入数字之和是：%d' %(sum)
print(result)

>>> sum(range(10))
45
>>> score = [90,80,70]
>>> avg = sum(score)/len(score)
>>> avg
80.0


======================================================

第4章	字符串与正则表达式

字符串
字符串是不可变序列，使用单引号、双引号、三单引号或三双引号作为界定符，不同的界定符之间可以相互嵌套
。一切对字符的更改操作都不是在原字符串的基础上进行的。

Python支持字符串驻留机制，即对于短字符串，将其赋值给多个不同的对象时，内存中只有一个副本，多个对象共享该副本，这点和Java字符串的机制是一样的。
但是长字符串并不遵守驻留机制。

>>> aStr = 'abcd'
>>> bStr = 'abcd'
>>> id(aStr) == id(bStr)
True

>>> cStr = 'abcd' * 100
>>> dStr = 'abcd' * 100
>>> id(cStr) == id(dStr)
False

Python3程序源文件默认为UTF-8编码，全面支持中文。
>>> 小王 = 'xiaowang'
>>> print(小王)
xiaowang

字符串格式化
result = '输入数字之和是：%d' %(sum)

format()函数进行格式化

字符串的常用方法：
find(subString)
split()	#默认任何空白符号（空格、换行和制表符等）都是分隔符
split(',')	#返回分割结果列表
split(None,maxCount) #maxCount为最大分割次数
join()	#连接字符串，join的效率要比“+”高
		>>> strList = ['aaa','bbb','ccc']
		>>> sep = ','
		>>> sep.join(strList)
		'aaa,bbb,ccc'
		
		>>> dateList = ['2016','01','14']
		>>> sep = '-'
		>>> sep.join(dateList)
		'2016-01-14'
lower()
upper()
capitalize() #将字符串首字母变为大写
title()	#将每个单词的首字母大写
swapcase()	#大小写互换
replace(oldSubStr,newSubStr) #字符串替换

maketrans() #生成字符映射表
translate() #按映射表关系转换字符串并替换其中的字符

strip() #删除两端的空白字符或连续的指定字符
strip(string)
rstrip() #删除右端的空白字符或连续的指定字符
rstrip(string)

eval() #内置函数，尝试把任意字符串转化为Python表达式并进行求值，有安全漏洞
	>>> eval("3+5")
	8

in #关键字
not in
	>>> 'aa' in 'aaa'
	True

startswith()
endswith()

	>>> aStr = 'test.py'
	>>> aStr.startswith('te')
	True
	>>> aStr.endswith('.py')
	True
	>>> 

isalnum() #判断是否为字母或数字
isalpha()
isdigit()

======================================================

第5章	函数

设计和编写函数，不仅可以实现代码的复用，更重要的是可以保证代码的一致性，只需要修改该函数代码则所有
调整位置均受到影响。

尽量只让一个函数完成一个功能，以提高模块的内聚性，尽量减少不同函数之间的隐式耦合性。

函数定义：
	def funcName([arguments]):
		函数体

fiber函数实现菲波那切数列		
def fiber(n):
    a, b = 1,1
    i = 0
    while i < n:
        print(a, end=' ')
        a, b = b, a+b
        i = i + 1

参数类型：
Python函数的参数有多种：普通参数、默认值参数、关键参数、可变长度参数等。
在定义函数时不需要指定参数的类型，形参的类型完全由调用者传递的参数类型和Python解释器的理解和推断来
决定的，类似于java的泛型。
不需要指定函数的返回值类型，函数的类型由return语句返回值的类型决定，如果函数中没有return语句或者没有执行到return语句而返回，则函数默认返回None。

默认值参数
def funcName(..., 形参名=默认值)：
	函数体

funcName.__defaults__返回函数所有默认值参数的当前值，返回值是一个元组。
注意：
默认值参数必须出现在函数参数列表的最右端，且任何一个默认值参数右边都不能再出现非默认值参数。
默认值参数只被解释一次。

关键参数
主要指实参，即调用参数时的参数传递方式，而与函数定义无关。
通过关键参数传递，实参顺序可以和形参顺序不一致，避免了需要牢记参数位置与顺序的麻烦，更加灵活方便。

def demo(a, b, c=6):
    print(a, b, c)

>>> demo(b=4,a=2)
2 4 6

可变长度参数
可变长度参数主要有两种形式：*parameter 和 **parameter。
*parameter用来接收任意多个实参并将其放在一个元组中；
**parameter用来接收类似于关键参数一样显示赋值形式的多个实参并将其放入字典中

#将接收的实参放入到一个元组中
def demo(*p):
    print(p)

>>> demo(1, 2, 3)
(1, 2, 3)	
	
#在调用该函数时会自动将接收的参数转换成字典
def demo2(**p):
    for item in p.items():
        print(item)
        
>>> demo2(x=1,y=2,z=3)
('x', 1)
('y', 2)
('z', 3)


参数传递的序列解包
传递参数时，可以使用Python列表、元组、集合、字典以及其他可迭代对象作为实参，并在实参名称前加一个
星号，Python解释器将自动进行解包，然后传递给多个单变量形参。
但需要注意的是，如果使用字典作为实参，默认使用的是字典的键，通过字典对象的items()和values()方法来
操作字典的键值对、值。
要保证实参中元素个数与形参个数相等。

def demo3(a, b, c):
    print(a + b + c)


>>> aList = [1, 2, 3]
>>> demo3(*aList)
6

>>> aTuple = [1, 2, 3]
>>> demo3(*aTuple)
6

>>> dic = {1:'a', 2:'b', 3:'c'}
>>> demo3(*dic)
6

>>> aSet = {1, 2, 3}
>>> demo3(*aSet)
6


变量作用域
局部变量
全局变量
全局变量可以通过global来声明或定义，分两种情况：
1.一个变量已在函数外定义，如果在函数内需要修改这个变量的值，并要将这个赋值结果反映到函数外，
可以在函数内用global声明这个变量，明确声明使用同名的全局变量。
2.在函数内部直接将一个变量声明为全局变量，在函数外没有声明，在调用这个函数之后，将增加为新的全局变量

def demo4(n = 10):
    global sum #是声明，而不可以在声明时直接赋值
    sum = 0
    for item in range(n):
        sum = sum + item
    return sum

>>> demo4()
45
>>> sum
45


lambda表达式
lambda表达式可以用来生命匿名函数，即没有函数名字的临时使用的小函数。
lambda表达式只可以包含一个表达式
>>> f = lambda x, y, z : x+y+z
>>> print(f(1,2,3))
6

>>> g = lambda x, y=2,z=3 : x+y+z
>>> g(1)
6


几个重要的内置函数或语句
内置函数map()
内置函数reduce()，需要导入functools模块
内置函数filter()
包含yield语句的函数创建生成器。迭代器的最大特点是惰性求值，它尤其适用于大数据处理。

===========================================================

第6章 面向对象程序设计

面向对象程序设计的一条基本原则是：
程序由多个能够起到子程序作用的单元或对象组合而成，这大大降低了软件开发难度，是编程就像搭积木一样简单。


类的定义与使用

class Student:  #类默认继承于object，等价于class Car(object):
    def show(self):
        print("I am a student...")

>>> student = Student()
>>> student.show()
I am a student...

方法说明：
类的所有实例方法的第一个形参必须是所谓的self（可变），self参数代表将来要创建的对象本身；
在类的实例方法中访问实例属性时需要以self为前缀；
调用实例方法时不需要传递这个参数。

属性说明：
一是实例属性；二是类属性。
实例属性，一般是指在构造函数__init__()中定义的，定义时以self作为前缀；
类属性，是在类中所有方法之外定义的数据成员。

Python的动态性是，可以动态地为类和对象增加成员。

>>> stu = Student()
>>> stu.show()
I am a student...
>>> stu.name = "周周"  #为本对象动态增加属性，但对其他对象不起作用
>>> print(stu.name)
周周
>>> stu2 = Student()
>>> stu2.name
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    stu2.name
AttributeError: 'Student' object has no attribute 'name'

小话下划线
如果属性名以两个下划线“__”开头，则是私有属性，否则为公有属性。
Python中，在类和模块中，以下划线开头的变量名有特殊的含义。
用下划线作为变量前缀和后缀来表示类的特殊成员。
_attr：表示保护变量，不能用"from module import *"导入，只有类对象和子类对象能访问这些变量；
__attr__：系统定义的特殊成员；
__attr：类中的私有成员，只有类对象自己能访问，子类对象也不能直接访问但可以通过父类的公有方法间接访问。但在对象外部可以通过特殊方式访问，如"对象名._类名__attr"，所以Python中不存在真正意义上的私有成员。

另外，在IDLE交互模式下，一个下划线"_"表示解释器中最后一次显示的内容或最后一次语句正确执行的输出结果。

>>> "test" + "下划线的作用"
'test下划线的作用'
>>> _
'test下划线的作用'


Python支持一种特殊的方式从外部直接访问类的私有成员，但不推荐。


类的方法

公有方法
私有方法
静态方法
类方法

静态方法和类方法都可以通过类名和对象调用，但是不能访问属于对象的成员，只能访问属于类的成员。

class Person:
    count = 0
    """构造方法"""
    def __init__(self,name='周周',age=22,gender='male'):
        Person.count += 1
        self.__ID = Person.count 
        self.__name = name
        self.__age = age
        self.__gender = gender
        

    """展示个人信息"""
    def tostring(self):
        info = 'ID是' + str(self.__ID) + '\n' + \
               'name是' + self.__name + '\n' + \
               'age是' + str(self.__age) + '\n' + \
               'gender是' + self.__gender
        return info

>>> p1 = Person()
>>> p1.tostring()
'ID是1\nname是周周\nage是22\ngender是male'
>>> print(p1.tostring())
ID是1
name是周周
age是22
gender是male

>>> p2 = Person('小周',12,'male')
>>> print(p2.tostring())
ID是2
name是小周
age是12
gender是male


类的属性
如下面代码所示，如果设置属性为只读，则无法修改它的值，也无法为对象增加与属性同名的的新成员属性，同时也无法删除对象属性。

class TestAttr:
    def __init__(self,ID):
        self.__ID = ID

    @property
    def ID(self): #只读，无法修改__ID属性值
        return self.__ID
		
>>> testAttr = TestAttr('1001')
>>> testAttr.ID
'1001'
>>> testAttr._TestAttr__ID
'1001'
>>> testAttr.ID = '1002'
Traceback (most recent call last):
  File "<pyshell#78>", line 1, in <module>
    testAttr.ID = '1002'
AttributeError: can't set attribute		

>>> testAttr.name = '小周'  #为本对象动态增加属性，但对其他对象不起作用
>>> testAttr.name
'小周'
>>> del testAttr.name	#把该对象的某一属性删除

>>> del testAttr.ID   #无法删除只读属性
Traceback (most recent call last):
  File "<pyshell#83>", line 1, in <module>
    del testAttr.ID
AttributeError: can't delete attribute



class TestAttr:
    def __init__(self,ID):
        self.__ID = ID

    @property
    def ID(self): #只读，无法修改__ID属性值
        return self.__ID

    def __get(self):    #是私有的getter方法
        return self.__ID

    def __set(self,id):
        self.__ID = id

    ID = property(__get,__set)  #该“只读属性”既可以读取也可以修改，但不可以删除

	
>>> testAttr = TestAttr('1003')

>>> testAttr.ID  #读取属性值
'1003'

>>> testAttr.ID = '1004'  #修改"只读属性"的属性值
>>> testAttr.ID
'1004'

>>> del testAttr.ID
Traceback (most recent call last):
  File "<pyshell#89>", line 1, in <module>
    del testAttr.ID
AttributeError: can't delete attribute


class TestAttr:
    def __init__(self,ID):
        self.__ID = ID

    @property
    def ID(self): #只读，无法修改__ID属性值
        return self.__ID

    def __get(self):    #是私有的getter方法
        return self.__ID

    def __set(self,id):
        self.__ID = id

    def __del(self):
        del self.__ID

    ID = property(__get,__set,__del)  #该“只读属性”既可以读取也可以修改，但不可以删除


>>> testAttr = TestAttr('1005')
>>> testAttr.ID
'1005'
>>> 
>>> testAttr.ID = '1006'
>>> testAttr.ID
'1006'
>>> del testAttr.ID
>>> testAttr.ID
Traceback (most recent call last):
  File "<pyshell#96>", line 1, in <module>
    testAttr.ID
  File "E:/Codes/pythonCodes/classtest.py", line 39, in __get
    return self.__ID
AttributeError: 'TestAttr' object has no attribute '_TestAttr__ID'


类的特殊方法
__init__()	构造函数
__del__()	析构函数，一般用来释放对象占用的资源，在Python删除对象和回收对象空间时自动执行。
...


类继承
Python支持多重继承，如果多个父类中有相同的方法名，而在子类中使用时没有指定父类名，则Python解释器将从左向右按顺序进行搜索。

class Person(object):
    def __init__(self, name = '', age = 22, gender = 'male'):
        self.setName(name)
        self.setAge(age)
        self.setGender(gender)

    def setName(self, name):
        self.__name = name

    def setAge(self, age):
        self.__age = age

    def setGender(self, gender):
        self.__gender = gender

    def tostring(self):
        info = '姓名是：' + self.__name + '\n' + \
               '年龄是：' + str(self.__age) + '\n' + \
               '性别是：' + self.__gender
        print(info)
        
>>> p = Person('小周')
>>> p.tostring()
姓名是：小周
年龄是：22
性别是：male


class Student(Person): #继承Person类
    def __init__(self, name = '', age = 22, gender = 'male', department = 'sesc'):
        #使用super()调用父类的构造方法，来初始化成员变量
        super(Student, self).__init__(name, age, gender)
        #Person.__init__(self,name,age,gender)
        self.setDepartment(department)

    def setDepartment(self, department):
        self.__department = department

    def tostring(self): #覆盖父类的tostring方法
        super(Student,self).tostring()
        print('学院是：'+self.__department)

if __name__ == '__main__':
    """测试父类Person"""
    per = Person('小周')
    per.tostring()

    print('---------------------------')
    """"测试子类Student"""
    stu = Student("周周同学")
    stu.tostring()
        
姓名是：小周
年龄是：22
性别是：male
---------------------------
姓名是：周周同学
年龄是：22
性别是：male
学院是：sesc


子类调用父类的方法的两种方式
super(SubClassName,self).fooFuncName(parameters...)  #前有实参self，后面不需要传递self实参
FooClassName.fooFuncName(self,parameters...)  #实参需要self


===================================================

第7章	文件

文件基本操作

文件对象名 = open(文件名, [,打开方式 [,缓冲区]])

缓冲区指定了读写文件的缓存模式，数值0表示不缓存，数值1表示缓存，如大于1则表示缓冲区的大小，默认值是缓冲模式。

文件打开模式
模式	说明
r		读模式
w		写模式
a 		追加模式

b		二进制模式（可与其他模式组合使用）
+		读、写模式（可与其他模式组合使用）


文件对象常用属性
属性 		说明 
Closed		判断文件是否关闭，若文件被关闭，则返回True
Mode		返回文件的打开模式
Name		返回文件的名称


文件对象常用的方法
方法 			功能说明
flush()			把缓冲区的内容写入文件，但不关闭文件
close()			把缓冲区的内容写入文件，同时关闭文件，并释放文件对象
read([size])	从文件中读取size个字符的内容作为结果返回，如果省略size则表示一次性读取所有内容
readline()		从文件文本中读取一行内容作为结果返回
readlines()		把文本文件中的每行文本作为一个字符串存入到列表中，返回该结果

seek(offset[,whence])	把文件指针移动到新的位置，offset表示相对于whence的位置。
						whence=0表示从文件头开始计算，默认为0
						whence=1表示从当前文件开始计算
						whence=2表示从文件尾开始计算
tell()					返回文件指针的当前位置
truncate([size])		删除从当前指针位置到文件末尾的内容。
						如果指定了size，则不论指针在什么位置都只留下前size个字节，其余的删除
write(s)		把字符串s的内容写入文件
writelines(s)	把字符串列表写入文本文件，不添加换行符


文本文件基本操作
>>> f = open('F:\\python文件操作.txt','a+')
>>> s = '写入内容2016年1月15日15:49:28'
>>> f.write(s)
22
>>> f.readlines()
[]
>>> f.readline()
''
>>> f.tell()
45
>>> f.seek(0)
0
>>> f.readlines()
['python文本文件\n', '写入内容2016年1月15日15:49:28']	
>>> f.close()


with关键字
使用上下文管理关键字with可以自动管理资源，不论何种原因跳出with块，总能保证文件被正确关闭，并且可以在代码块执行完毕后自动还原进入该代码块时的现场。

>>> s = '使用上下文管理关键字with可以自动管理资源'
>>> with open('F:\\python文本文件','a+') as f:
	f.write(s)
	f.seek(0)
	f.readlines()	
22
0
['使用上下文管理关键字with可以自动管理资源使用上下文管理关键字with可以自动管理资源']



读取文本文件
def readtextfile():
    f = open('F:\\python文本文件.txt','r')
    while True:
        line = f.readline()
        if line == '':
            break
        print(line)
    f.close()

def readtextfile2():
    f = open('F:\\python文本文件.txt','r')
    lines = f.readlines()
    for line in lines:
        print(line)
    f.close()



	
二进制文件基本操作
序列化是指把内存中的数据在不丢失其类型信息的情况下转成对象的二进制形式表示的过程，对象序列化后的形式经过正确的反序列化过程应该能够准确地恢复为原对象。

Python中常用的序列化模块有struct、pickle、json、marshal和shelve，
其中pickle有C语言实现的cPickle，速度约提高1000倍，应优先考虑使用。


pickle模块
pickle是较为常用并且速度非常快的二进制文件序列化模块。
pickle模块进行对象序列化和二进制文件读写。


用pickle写入二进制文件
import pickle 
def writeBinFile():
    f = open(r'F:\binary.bat','wb')
    n = 7  #表示后面要写入的文件个数
    i = 130000
    a = 99.0001
    s = '小周周'
    aList = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    aTuple = (-15,12,56)
    coll = {1, 3, 5}
    dic = {'a':1, 'b':2, 'c':3}
    try:
        pickle.dump(n,f)  #表示后面要写入的文件个数
        pickle.dump(i,f)  #把i转换成字节串，并写入文件
        pickle.dump(a,f)
        pickle.dump(s,f)
        pickle.dump(aList,f)
        pickle.dump(aTuple,f)
        pickle.dump(coll,f)
        pickle.dump(dic,f)
    except:
        print('写入二进制文件异常')
    finally:
        f.close()
				
用pickle读出二进制文件
def readBinFile():
    f = open(r'F:\binary.bat','rb')
    n = pickle.load(f)  #读出文件的数据个数
    count = 0
    while count < n:
        x = pickle.load(f)
        print(x)
        count += 1
    f.close()
        

>>> writeBinFile()
>>> 
>>> readBinFile()
130000
99.0001
小周周
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
(-15, 12, 56)
{1, 3, 5}
{'c': 3, 'b': 2, 'a': 1}




使用struct模块读写二进制文件

import struct
def writeBinFileByStruct():
    n = 100001
    x = 19.00012
    b = True
    s = 'python'
    sn = struct.pack('if?',n,x,b)  #把整数n、浮点数x、布尔对象b依次转换为字节串
    f = open(r'F:\binary2.bat','wb')
    f.write(sn)  #写入字节串
    #f.write(s)   #字符串可以直接写入
    f.close()

def readBinFileByStruct():
    f = open(r'F:\binary2.bat','rb')
    sn = f.read(9)
    tu = struct.unpack('if?',sn)  #从字节sn中还原出1个整数、1个浮点数和1个布尔值，并返回元组
    print(tu)
    n = tu[0]
    x = tu[1]
    b = tu[2]
    print('n=',n)
    print('x=',x)
    print('b=',b)
    #  = f.read(9)
    f.close()
    #print('s=',s)


>>> writeBinFileByStruct()
>>> readBinFileByStruct()
(100001, 19.000120162963867, True)
n= 100001
x= 19.000120162963867
b= True
	

文件和目录操作
Python提供了os/os.path/shutil等大量模块支持文件级的操作。

os模块的常用文件操作方法
os.path模块的常用文件操作方法
shutil模块的常用文件操作方法
>>> import os
>>> dir(os)

>>> import os.path
>>> dir(os.path)

>>> import shutil
>>> dir(shutil)


>>> import os
>>> import os.path
>>> os.path.exists(r'F:\binary.bat')
True
>>> os.rename(r'F:binary.bat',r'F:\binaryNewName.bat')
>>> os.path.exists(r'F:\binaryNewName.bat')
True

>>> import shutil
>>> shutil.copyfile(r'f:\python文本文件.txt',r'f:\python文本文件_bak.txt')
'f:\\python文本文件_bak.txt'	


文件读写应用
"""计算文本文件中最长行的长度"""
#方法一
def maxLen():
    f = open(r'f:\python文本文件.txt','r')
    allLineLens = [len(line.strip()) for line in f]  #strip()函数可以去掉字符串两端的空白字符
    longest = max(allLineLens)
    print(longest)
    f.close()

#方法二
def maxLen2():
    f = open(r'f:\python文本文件.txt','r')
    longest = max(len(line.strip()) for line in f)
    print(longest)
    f.close()


"""读取文本文件"""    
def readtext():
    f = open(r'f:\python文本文件.txt','r')
    for line in f:
        print(line)
    f.close()
	
计算字符串MD5值，MD5值可以用来判断文件发布之后是否被篡改，对于文件完整性保护具有重要意义。

用xlwt模块和xlrd模块可以写入、读取Excel文件，这两个模块需要使用pip安装。
pywin32模块也可以对Excel文件操作，这个模块也需要使用pip安装。


=======================================

第8章 异常处理结构和程序调试













